from langchain_community.utilities import SQLDatabase
from model import Model
from query_agent import Query
from agent import Agent
from rich.console import Console
from rich.syntax import Syntax
from rich.table import Table

console = Console()
db = SQLDatabase.from_uri("mysql+mysqlconnector://superuser2:senhasupersegura@localhost/Reservas")

if __name__ == "__main__":
    texto_exemplo = """ """

    # Inicializa o modelo
    model_instance = Model()
    model = model_instance.get_model()

    # Criando e executando o primeiro agente
    console.print("[bold yellow] ü§ñ Executando o Agente 1...[/bold yellow]")
    template_1 = """
            Voc√™ √© um assistente especializado em analisar e-mails e dizer se o email {input} se refere a uma Reserva ou Altera√ß√£o. 
            Responda somente com "Reserva" ou "Altera√ß√£o".
                """
    agente1 = Agent(model, input=texto_exemplo, input2=None, template=template_1)
    #console.print(f"[bold green]üßæ Prompt: \n {template_1}[/bold green]", justify="full")
    resposta = agente1.output()
    console.print(f"[bold yellow]Resposta do Agent 1:[/bold yellow][bold green] {resposta.content}[/bold green]\n")

    if "Reserva" in resposta.content:
        # Criando e executando o segundo agente
        console.print("[bold yellow]ü§ñ Executando o Agente 2...[/bold yellow]\n")
        
        template_2 = """
                Voc√™ √© um assistente especializado em aloca√ß√£o de laborat√≥rios,  extraia as informa√ß√µes do e-mail {input} e retorne apenas os valores de Data da atividade (ANO/M√äS/DIA), Turno, Software(s) a ser(em) utilizado(s), Quantidade de participantes presenciais, Curso e Observa√ß√µes. Sem fornecer explica√ß√µes adicionais.
                    """
        agent2 = Agent(model, template=template_2, input=texto_exemplo, input2=None)
        #console.print(f"[bold green]üßæ rompt: \n {template_2}[/bold green]", justify="full")

        resposta = agent2.output()

        sql_question = f"""Use as informa√ß√µes presentes em {resposta.content} e responda: Quais laborat√≥rios est√£o com o Status diferente de Ocupado e com a capacidade maior ou igual a de Quantidade de participantes presenciais? 
        **o formato da data deve ser dd/mm/YY**, retorne **apenas** os Laborat√≥rios sem limite de Linhas. **N√£o use Software e Curso como filtro!**.
       """
        #console.print(f"[bold green]üßæ Prompt: \n {sql_question}[/bold green]", justify="full")
        query_instance = Query(sql_question, model)
        response = query_instance.RunQuery()
        
        syntax = Syntax(response[9:], "sql", theme="monokai", line_numbers=True)
        console.print("[bold yellow]Query executada:[/bold yellow]\n")
        console.print(syntax,  ' ',  '\n')
        query = db.run(response[9:])

        if query == '':
            print("Nenhum laborat√≥rio encontrado.")
        else:
            #print(f"Laborat√≥rios encontrados: {query}")

            # Criando e executando o quarto agente
            #console.print("[bold yellow]ü§ñ Executando o Agente 3...[/bold yellow]")
            template_4 = """
            Voc√™ √© um assistente especializado em aloca√ß√£o de laborat√≥rios. Sua fun√ß√£o √© analisar a entrada {input} e compar√°-la com {input2}, retornando o laborat√≥rio mais adequado, seguindo as seguintes regras:

            Regras de Aloca√ß√£o:
                1. Prefer√™ncias por Curso:
                    1.1. Alguns cursos t√™m prefer√™ncia por certos laborat√≥rios. Por exemplo:
                        - Cursos de Engenharia Mec√¢nica devem ser priorizados nos laborat√≥rios **E08**.
                    
                2. Compatibilidade de Software:
                    2.1. Alguns laborat√≥rios possuem softwares espec√≠ficos instalados. Abaixo est√£o os softwares e seus respectivos laborat√≥rios:
                        - AutoCAD: B09 010, A02 212, E08 101, C08 100o.
                    2.2. **Priorize laborat√≥rios que atendam tanto √† prefer√™ncia de curso (Regra 1.1) quanto √† compatibilidade de software (Regra 2.1)**. Se um laborat√≥rio for listado tanto na prefer√™ncia de curso quanto na lista de compatibilidade de software, ele deve ser escolhido como a **melhor op√ß√£o**.
                    2.3. Caso um software seja necess√°rio e entre em conflito com a prefer√™ncia de curso (Regra 1.1), priorize a compatibilidade de software.

                3. Prefer√™ncia de Laborat√≥rio Espec√≠fico:
                    3.1. Se {input} contiver um laborat√≥rio espec√≠fico nas observa√ß√µes, ele deve ter prioridade. No entanto, esse laborat√≥rio s√≥ deve ser escolhido se estiver em conformidade com a Regra 2 (compatibilidade de software).
                    3.2. Caso o laborat√≥rio especificado n√£o seja compat√≠vel com a Regra 2, escolha outro laborat√≥rio que atenda ao software necess√°rio.

            Observa√ß√£o: Pequenas varia√ß√µes na escrita dos nomes dos cursos podem ocorrer.

            Sa√≠da: Retorne apenas o nome do laborat√≥rio selecionado. Priorize o laborat√≥rio que atenda tanto √† Regra 1.1 quanto √† Regra 2.1, caso exista. Caso contr√°rio, siga a compatibilidade de software (Regra 2) para resolver conflitos.
        """
            #console.print(f"[bold green]üßæ Prompt: \n {template_4}[/bold green]")
            agent4 = Agent(model, template=template_4, input=resposta.content, input2=query)
            resposta = agent4.output()
            console.print(f"[bold green]Laborat√≥rio selecionado:[/bold green] [purple]{resposta.content}[/purple]")
